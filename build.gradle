task wrapper(type: Wrapper) {
  gradleVersion = '2.2.1'
}

allprojects {
  group = 'com.fsist'
  version = '0.8.0M5'

  apply plugin: 'scala'
  apply plugin: 'maven'
  apply plugin: 'signing'

  defaultTasks 'compileScala', 'compileTestScala'

  // Can't set targetCompatibility (i.e. JDK level) to 1.7 or above because of https://issues.scala-lang.org/browse/SI-8645
  // Which was due to JDK bug https://bugs.openjdk.java.net/browse/JDK-8046233 which was fixed in JDK 7u76 / 8u25 (but we don't have those new versions yet)
  compileScala.sourceCompatibility = '1.6'
  compileScala.targetCompatibility = '1.6'

  compileScala.scalaCompileOptions.deprecation = true
  compileScala.scalaCompileOptions.failOnError = true
  compileScala.scalaCompileOptions.unchecked = true
  compileScala.scalaCompileOptions.additionalParameters = ['-feature']

  repositories {
    mavenCentral()
  }

  dependencies {
    compile 'org.scala-lang:scala-library:2.11.6'
    compile 'org.scala-lang:scala-reflect:2.11.6'
    compile 'org.scala-lang:scala-compiler:2.11.6'

    compile 'com.typesafe.scala-logging:scala-logging_2.11:3.1.0'
    compile 'commons-codec:commons-codec:1.10' // For base64
    
    testCompile 'ch.qos.logback:logback-classic:1.1.2'
    testCompile 'org.scalatest:scalatest_2.11:2.2.1'
    testCompile 'org.pegdown:pegdown:1.4.2'
  }

  project.archivesBaseName = project.name + "_2.11"

  task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
  }

  task scaladocJar(type: Jar, dependsOn: scaladoc) {
    classifier = 'javadoc'
    from scaladoc.destinationDir
  }

  task testJar(type: Jar, dependsOn: compileTestScala) {
    from compileTestScala.destinationDir
    appendix 'test' // Names the jar
  }

  signing {
    sign jar
    sign sourcesJar
    sign scaladocJar
  }

  artifacts {
    archives jar
    archives sourcesJar
    archives scaladocJar
  }

  uploadArchives {
    repositories {
      mavenDeployer {
//        repository(url: "file:maven")

        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

        repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
          authentication(userName: ossrhUsername, password: ossrhPassword)
        }

        snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
          authentication(userName: ossrhUsername, password: ossrhPassword)
        }

        pom.project {
          name 'safepickle'
          artifactId = project.name + '_2.11'

          packaging 'jar'
          description 'A small Scala pickling library.'
          url 'https://github.com/fsist/safepickle'

          scm {
            connection 'scm:git:git@github.com:fsist/safepickle.git'
            developerConnection 'git@github.com:fsist/safepickle.git'
            url 'https://github.com/fsist/safepickle'
          }

          organization {
            name = 'Sentrix'
            url = 'http://www.sentrix.com/'
          }

          licenses {
            license {
              name 'The Apache License, Version 2.0'
              url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            }
          }

          developers {
            developer {
              id 'danarmak'
              name 'Daniel Armak'
              email 'daniel@sentrix.com'
            }
          }
        }
      }
    }
  }

  task scalatest(type: JavaExec, dependsOn: [ compileTestScala, testJar] ) {
//    maxHeapSize '4096M'
    main 'org.scalatest.tools.Runner'
    classpath compileTestScala.classpath
    classpath testJar.archivePath
    args = [ '-o', '-w', 'com.fsist.safepickle', '-h', 'test-output-html', '-R', testJar.archivePath ]
  }
}

/* Tests for all projects, at once */

// Merge all test classes in a single JAR, allowing the ScalaTest runner to discover them all in one run
task scalatestallJar(type: Jar) {
  baseName 'scalatestall'

  destinationDir project.buildDir

  for (prj in allprojects) {
    from prj.compileTestScala.destinationDir
    from "${prj.projectDir}/src/test/resources"
  }

  exclude 'logback.xml'
  exclude 'application.conf'
}

for (prj in allprojects) {
  scalatestallJar.dependsOn(prj.compileTestScala)
}

clean << {
  delete 'test-output-xml'
  delete 'test-output-html'
}

task scalatestall(type: JavaExec, dependsOn: scalatestallJar) {
//  maxHeapSize '4096M'
  main 'org.scalatest.tools.Runner'

  for (prj in allprojects) {
    classpath prj.compileScala.classpath
    classpath prj.compileTestScala.classpath // Which also includes the compileScala jar
    classpath prj.compileTestScala.destinationDir // For access to resource files without going through class loaders
  }
  classpath scalatestallJar.archivePath

  args = [ '-o', '-w', 'com.fsist.safepickle', '-u', 'test-output-xml', '-h', 'test-output-html', '-R', scalatestallJar.archivePath ]
}

// Declares an inter-project dependency that includes the compileTestScala configuration,
// so test code in one project can depend on test code in another.
def dependOnProject(srcproj, targetPath) {
  srcproj.dependencies {
    compile project(targetPath)
    testCompile project(path: targetPath, configuration: 'testCompile')
    testCompile files(project(targetPath).tasks.compileTestScala.destinationDir)

    // IntelliJ doesn't seem to understand exported test deps, so we add the test deps of the target project explicitly:
    testCompile project(targetPath).configurations.getByName('testCompile').allDependencies
  }

  srcproj.compileTestScala.dependsOn("$targetPath:compileTestScala")

//  srcproj.distConfig.from targetproj.file('src/main/resources')
}

